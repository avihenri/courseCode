/* CSS GRID ESSENTIALS
Introduction to Grids */

    /*
    - The grid can be used to lay out entire web pages. 
    - Whereas Flexbox is mostly useful for positioning items in a one-dimensional layout, 
        CSS grid is most useful for two-dimensional layouts, providing many tools for aligning and 
        moving elements across both rows and columns.
    */

    /* Creating a Grid */
    /* To set up a grid, you need to have both a grid container (parent) and grid items (children). */
        /* To turn an HTML element into a grid container, you must set the element’s display property 
            to grid (for a block-level grid) or inline-grid (for an inline grid). */
            .grid {
                display: grid; /* required */
                border: 2px blue solid;
                width: 400px;
                height: 500px;
              }
    
    /* Creating Columns - grid-template-columns */
        /* By default, grids contain only one column. If you were to start adding items, 
        each item would be put on a new row; that’s not much of a grid! To change this, 
        we need to explicitly define the number of rows and columns in our grid.  */
        .grid {
            display: grid;
            width: 500px;
            grid-template-columns: 100px 200px; 
            /* amount of widths is the no of colms, this is two cols 1st @ 100px & 2nd @ 200px */
          }
          /* Percentages */
          .grid {
            display: grid;
            width: 1000px;
            grid-template-columns: 20% 50%; /* precent of the width 1000px */
          }
          /* mix and match */
          .grid {
            display: grid;
            width: 100px;
            grid-template-columns: 20px 40% 60px; /* 3 cols = bigger than width */
          }

    /* Creating Rows - grid-template-rows */ 
    /* This property is almost identical to grid-template-columns. Take a look at the code below to see both properties in action. */
        .grid {
        display: grid;
        width: 1000px;
        height: 500px;
        grid-template-columns: 100px 200px;
        grid-template-rows: 10% 20% 600px;
        }
        /*
        This grid has two columns and three rows. 
        grid-template-rows defines the number of rows and sets each row’s height. 
        In this example, the first row is 50 pixels tall (10% of 500), the second row is 100 pixels tall (20% of 500), 
        and the third row is 600 pixels tall. */

    /* Grid Template - grid-template */
        /* for both columns and rows */
        .grid {
            display: grid;
            width: 1000px;
            height: 500px;
            grid-template: 200px 300px / 20% 10% 70%; /* before slash is row and after is cols */
          }

    /* Fraction */
        /* fr = new unit for css grid 
            defines colms/rows as fractions of the grid
            helps prevent overflow */
            .grid { 
              display: grid; 
              width: 1000px; 
              height: 400px; 
              grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr; 
            }
            /* rows = 3 (1@2fr = 200px & the others @1fr = 100px each) 400px
                colms = 3 (1st & last @1fr 200px & 2nd @3fr 600px) 1000px
                Can use other units with fr. 
                fr just takes up the available space */

    /* Repeat */
        /* a function - to define your columns & rows */
        .grid {
          display: grid;
          width: 300px;
          grid-template-columns: repeat(3, 100px); /* 3 columns @ 100px */
        }
        /* repeat(5, 1fr) would split your table into five equal rows or columns.
          the 2nd parameter can take multiple values - */
         .grid { grid-template-columns: repeat(2, 20px 50px); }
          /* will create 4 colms 1 = 20px 2 = 50px 3rd = 20px 4th = 50px */
      
    /* minmax */
        .grid {
          display: grid;
          grid-template-columns: 100px minmax(100px, 500px) 100px;
        }
        /* 1st & 3rd col = 100px & 2nd will be between 100px & 500px depending on page size */

    /* grid-gap */
        .grid { 
          display: grid; 
          width: 320px; 
          grid-template-columns: repeat(3, 1fr); 
          grid-column-gap: 10px; 
        }
        /* gap wont be added to beginning or end
           320px wide = 20px to gaps & 100px per colm
           the same for grid-row-gap
           or grid-gap: 20px 10px; 1st = rows & 2nd = colms */
    
    /* Grid Items */
        .item {
          grid-row-start: 1; /* grid lines */
          grid-row-end: 3; /* grid lines */
        }
        /* the aboce takes up 2 rows - rows 1 & 2
          grid lines start at 1 & end value is 1 greater the no of rows
           - 5 rows = 1-6 or 8 rows = 1-9
          start at row you want to begin & end 1 row greater than you want
           - want rows 2, 3 & 4 = start: 2 & end: 5 */
           .item {
            grid-row: 1 / 3; /* shorthand of above */
          }  
          /* same for grid-column-start, grid-column-end and grid-column */
          .item {
            grid-column: 4 / span 2; /* span keyword helps you see its spanning 2 cols */            
          }
          /* below is the shorthand for all - */
          .item {
            grid-area: 2 / 3 / 4 / span 5;
          }
          /* order of values -
           1. grid-row-start
           2. grid-column-start
           3. grid-row-end
           4. grid-column-end *


      /* At this point, we’ve covered a great deal of different ways to manipulate the grid and the items inside it to create interesting layouts.

        grid-template-columns: defines the number and sizes of the columns of the grid
        grid-template-rows: defines the number and sizes of the rows of the grid
        grid-template: is a shorthand for defining both grid-template-columns and grid-template-rows in one line
        grid-gap: puts blank space between rows and/or columns of the grid
        grid-row-start: and grid-row-end: makes elements span certain rows of the grid
        grid-column-start: and grid-column-end: makes elements span certain columns of the grid
        grid-area: is a shorthand for grid-row-start, grid-column-start, grid-row-end, and grid-column-end, all in one line
     */


/* ======== ADVANCED CSS GRID ======== */

/* Grid Template Areas */
      /* lets you name sections of you webpage */
        /* <div class="container">
        <header>Welcome!</header>
        <nav>Links!</nav>
        <section class="info">Info!</section>
        <section class="services">Services!</section>
        <footer>Contact us!</footer>
      </div> */
      .container {
        display: grid;
        max-width: 900px;
        position: relative;
        margin: auto;
        grid-template-areas: "head head"
                             "nav nav" 
                             "info services"
                             "footer footer";
        grid-template-rows: 300px 120px 800px 120px;
        grid-template-columns: 1fr 3fr; 
      }      
      header {
        grid-area: head;
      }       
      nav {
        grid-area: nav;
      }       
      .info {
        grid-area: info;
      }       
      .services {
        grid-area: services;
      }      
      footer {
        grid-area: footer;
      } 
      /*
        In the example above, the HTML creates a web page with five distinct parts.
        The grid-template-areas declaration in the .container rule set creates a 2-column, 4-row layout.
        The grid-template-rows declaration specifies the height of each of the four rows from top to 
          bottom: 300 pixels, 120 pixels, 800 pixels, and 120 pixels.
        The grid-template-columns declaration uses the fr value to cause the left column to use one fourth
           of the available space on the page and the right column to use three-fourths of the available 
           space on the page.
        In each rule set below .container, we use the grid-area property to tell that section to cover the 
          portion of the page specified. The header element spans the first row and both columns. The nav 
          element spans the second row and both columns. The element with class .info spans the third row 
          and left column. The element with class .services spans the third row and right column. The footer 
          element spans the bottom row and both columns.
        That’s it! An entire page laid out in 40 lines of code. */

    /* Overlapping Elements */
      /*
        <div class="container">
        <div class="info">Info!</div> 
        <img src="#" />
        <div class="services">Services!</div>
      </div> */
      .container {
        display: grid;
        grid-template: repeat(8, 200px) / repeat(6, 100px);
      }      
      .info {
        grid-area: 1 / 1 / 9 / 4;
      }      
      .services {
        grid-area: 1 / 4 / 9 / 7;
      }      
      img {
        grid-area: 2 / 3 / 5 / 5;
        z-index: 5;
      }
      /*
      In the example above, there is a grid container with eight rows and six columns. There are three grid items within the container — a 
      <div> with the class info, a <div> with the class services, and an image.
      The info section covers all eight rows and the first three columns. The services section covers all eight rows and the last three columns.
      The image spans the 2nd, 3rd, and 4th rows and the 3rd and 4th columns.
      The z-index property tells the browser to render the image element on top of the services and info sections so that it is visible. */

    /* Justify Items */
    /*
      There are two axes in a grid layout — the column (or block) axis and the row (or inline) axis.
      justify-items: aligns inline or row axis
      with start, end, center or stretch */
      main {
        display: grid;
        grid-template-columns: repeat(3, 400px);
        justify-items: center;
      }

    /* Justify Content */
      /* position the entire grid along the row axis.
        start, end, center, stretch, space around (equal amount of space on each side), space-between (equal amount of space between items), space-evenly (even amount of space at either end)
        */
        main {
          display: grid;
          width: 1000px;
          grid-template-columns: 300px 300px;
          grid-template-areas: "left right"; 
          justify-content: center;
        }
      /* In the example above, the grid container is 1000 pixels wide, but we only specified two columns that are 300 pixels each. 
            This will leave 400 pixels of unused space in the grid container.
        justify-content: center; positions the columns in the center of the grid, leaving 200 pixels on the right and 200 pixels on the left of the grid. */

    /* Align Items */
        /* aligns along the block or column axis
          start, end, center, stretch */
          main {
            display: grid;
            grid-template-rows: repeat(3, 400px);
            align-items: center;
          }
          /*
            There is a grid container with three rows that are 400 pixels tall.
            The container has three grid items that do not have a specified width.
            Without setting the align-items property, these elements will span the height of the row they are in (400 pixels).
            By setting the align-items property to center, the .card <div>s will be centered vertically inside of their rows. 
              They will only be as tall as necessary to contain their content (the words Card 1, etc).
            If we specify a height for the .card elements, they will not stretch the height of their row even if align-items: stretch; is set. */
        
    /* Aligm Content */
      /* along the column axis
          start, end, stretch, space around (equal amount of space on each side), space-between (equal amount of space between items), space-evenly (even amount of space at either end) */
          main {
            display: grid;
            height: 600px;
            rows: 200px 200px;
            grid-template-areas: "top"
                                 "bottom"; 
            align-content: center;
          }
          /* In the example above, the grid container is 600 pixels tall, but we only specified two rows that are 200 pixels each. This will leave 200 
            pixels of unused space in the grid container.
          align-content: center; positions the rows in the center of the grid, leaving 100 pixels at the top and 100 pixels at the bottom of the grid. */

  /* Justify Self and Align Self */
      /* position for row and columns respectively
        start, end, center, stretch */
          
  /* Implicit vs. Explicit Grid */
        /* The implicit grid is an algorithm built into the specification for CSS Grid that determines default 
        behavior for the placement of elements when there are more than fit into the grid specified by the CSS.
        The default behavior of the implicit grid is as follows: items fill up rows first, adding new rows as necessary. 
          New grid rows will only be tall enough to contain the content within them. In the next exercise, you’ll learn 
          how to change this default behavior. */

    /* Grid Auto Rows and Grid Auto Columns */
          /*
            grid-auto-rows specifies the height of implicitly added grid rows
            grid-auto-columns specifies the width of implicitly added grid columns.
            both accept - pixels (px) percentages (%) fractions (fr) the repeat() function */
            body {
              display: grid;
              grid: repeat(2, 100px) / repeat(2, 150px); 
              grid-auto-rows: 50px;
            }
            /* 
            In the example above, there are 5 <div>s. However, in the section rule set, we only specify a 2-row, 2-column grid — four grid cells.
            The fifth <div> will be added to an implicit row that will be 50 pixels tall. *

    /* Grid Auto Flow */
          /* specify the order in which they are rendered
            grid-auto-flow specifies whether new elements should be added to rows or columns
            Accepts - row, column, dense
            You can pair row and column with dense, like this: grid-auto-flow: row dense; */

        
    /* Review
        Great work! You have learned many new properties to use when creating a layout using CSS Grid! Let’s review:

        grid-template-areas specifies grid named grid areas
        grid layouts are two-dimensional: they have a row, or inline, axis and a column, or block, axis.
        justify-items specifies how individual elements should spread across the row axis
        justify-content specifies how groups of elements should spread across the row axis
        justify-self specifies how a single element should position itself with respect to the row axis
        align-items specifies how individual elements should spread across the column axis
        align-content specifies how groups of elements should spread across the column axis
        align-self specifies how a single element should position itself with respect to the column axis
        grid-auto-rows specifies the height of rows added implicitly to the grid
        grid-auto-columns specifies the width of columns added implicitly to the grid
        grid-auto-flow specifies in which direction implicit elements should be created
        This is a great time to experiment with the code in the code editor and try any of the properties you want to practice more! When you’re ready, move on! */