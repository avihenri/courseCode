BASIC GIT WORKFLOW
A Working Directory: where you’ll be doing all the work: creating, editing, deleting and organizing files
A Staging Area: where you’ll list changes you make to the working directory
A Repository: where Git permanently stores those changes as different versions of the project

git init - initalises into a git project
git status - checks working directory  
git add <filename> - addeds to staging area
git diff <filename> - checks the changes between the staging and working areas. If you are happy git add the changes.
git commit - permanently stores changes to staging area. It requires -m for a message
git commit -m 'Your reason for commit'
Standard Conventions for Commit Messages:
    Must be in quotation marks
    Written in the present tense
    Should be brief (50 characters or less) when using -m
    git log - storage of commits in chronological order use q to quit

HOW TO BACK TRACK
The most reason commit is the HEAD
git show HEAD - shows the current commit like the git log
git checkout HEAD <filename> git checkout -- <filename> - will restore the file in your working directory to look exactly as it did when you last made a commit.
git add filename_1 filename_2 - add multiple files
git reset HEAD <filename> - unstage file (It does not discard file changes from the working directory, it just removes them from the staging area.)
git reset 5d69206 - the number is first 7 characters of the SHA commit number (do git log to get that)
Before reset:
    HEAD is at the most recent commit
After resetting:
    HEAD goes to a previously made commit of your choice
    The gray commits are no longer part of your project
    You have in essence rewound the project’s history

BRANCHING
git branch - checks what branch you are on
git branch <branch-name> - creates a new branch of current repo 
git checkout <branch-name> - will switch to that branch
git merge <branch-name> - will merge branch into master (checkout master first)
 Keep in mind:
    Your goal is to update master with changes you made to fencing.
    fencing is the giver branch, since it provides the changes.
    master is the receiver branch, since it accepts those changes.
 if there is a conflict, the merge will fail and said you should fix them. In the code editor it should show you what is conflicted with HEAD and branch-name
git branch -d <branch-name> - will delete a branch

TEAMWORK
git clone remote_location clone_name - clones a remote repo and names it
git remote -v
    Git lists the name of the remote, origin, as well as its location.
    Git automatically names this remote origin, because it refers to the remote repository of origin. However, it is possible to safely change its name.
    The remote is listed twice: once for (fetch) and once for (push). We’ll learn about these later in the lesson.
git fetch - checks for updates and pulls them to your a local origin/master branch (doesn't merge to master)
git merge - merge into master

A remote is a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.
The Git Collaborative Workflow are steps that enable smooth project development when multiple collaborators are working on the same Git project.
We also learned the following commands

git clone: Creates a local copy of a remote.
git remote -v: Lists a Git project’s remotes.
git fetch: Fetches work from the remote into the local copy.
git merge origin/master: Merges origin/master into your local branch.
git push origin <branch_name>: Pushes a local branch to the origin remote.
Git projects are usually managed on Github, a website that hosts Git projects for millions of users. With Github you can access your projects from anywhere in the world by using the basic workflow you learned here.

