LEARN BASH SCRIPTING
    Introduction to Bash Scripting
        Great way to automate repetitive tasks
        executes within Bash shell terminal
        Any cmd you can run in a terminal can be run in a bash script
        Script should start with - #!/bin/bash
            this tells the computer which type of interpreter to use for the script
        When saving script files - should save in ~/bin/ directory
        Scripts need to have execute permissions 
            to add this do command - chmod +x script.sh 
        Terminal will run file every time it is opened to load config
        LINUX - ~/.bashrc
        OSX - ~/.bash_profile
        To ensure files in ~/bin/ are available the path needs to be added to the PATH config file  
            PATH=~/bin:$PATH
        To run in terminal do ./file_name.sh

        EXERCISE
            file - script.sh
            #!/bin/bash
            echo "Hello Codecademy!"

            in Terminal - ./script.sh 
                Hello, Codecademy!

    Variables
        greeting="Hello"
            to access - echo $greeting = Hello
        
        EXERCISE    
            #!/bin/bash
            phrase="Hello to you!"
            echo $phrase

    Conditionals
        Controls which set of cmds in script run
        Using if statement - if [ condition ] then echo $blah else echo $blahblah fi        
            (ends in a backwards if)
        Bash scripts use specific operators for comparison
            Equal: -eq
            Not equal: -ne
            Less than or equal: -le
            Less than: -lt
            Greater than or equal: -ge
            Greater than: -gt
            Is null: -z
        When comparing strings - best practice to put the variable into quotes ( " )
            this prevents errors if the variable is null or contains spaces
            common operators for comparing strings are:
            Equal: ==
            Not equal: !=
            if [ "$foo" == "$bar"]

        EXERCISE    
            #!/bin/bash
            first_greeting="Nice to meet you!"
            later_greeting="How are you?"
            greeting_occasion=1
            if [ $greeting_occasion -lt 1 ]
            then
            echo $first_greeting
            else
            echo $later_greeting
            fi

    Loops
        3 types of loops - for, while, until (latter two very similar)
        For loop
            iterate through a list & execute and action at each step    
            for word in $paragraph
            do
            echo $word
            done
            Word is being defined at the top of the for loop so there is no $ prepended
        While loop  
            keep looping while the condition is true
            Below prints the index var as long as it is less than 5
            while [ $index -lt 5 ]
            do
            echo $index
            index=$((index + 1))
            done
        Until loop
            loops until the condition is true
            Loops until index is equal to 5
                until [ $index -eq 5 ]
                do
                echo $index
                index=$((index + 1))
                done

        Note:: arithmetic in bash scripting uses the $((...)) syntax and within the brackets the variable name is not prepended with a $.

        EXERCISE    
            #!/bin/bash
            first_greeting="Nice to meet you!"
            later_greeting="How are you?"
            greeting_occasion=0
            while [ $greeting_occasion -lt 3 ]
            do
            if [ $greeting_occasion -lt 1 ]
            then
            echo $first_greeting
            else
            echo $later_greeting
            fi
            greeting_occasion=$((greeting_occasion + 1))
            done

    Inputs
        Allow user inputs - read syntax
            echo "Guess a number"
            read number
            echo "You guessed $number"
        Have user add input arguments 
            arguments are entered after the script name & separated by spaces
                saycolors red green blue
        In the script these are accessed with $1, $2...
            Note:: 1 indexed
        If you have indefinite number of arguments we need to iterate through them using -> "SQ"
            for color in "$@"
            do
            echo $color
            done

        files=/some/directory/* - gets all files in the directory
        for file in $files
        do
        echo $file
        done

    EXERCISE
        #!/bin/bash
        first_greeting="Nice to meet you!"
        later_greeting="How are you?"
        greeting_occasion=0
        echo "How many times should I greet?"
        read greeting_limit
        while [ $greeting_occasion -lt $greeting_limit ]
        do
        if [ $greeting_occasion -lt 1 ]
        then
            echo $first_greeting
        else
            echo $later_greeting
        fi
        greeting_occasion=$((greeting_occasion + 1))
        done

    Aliases 
        set up Aliases in  .bashrc or .bash_profile  files
        <file saycolors.sh>
            alias saycolors='./saycolors.sh'
        Add standard input arguments to aliases 
            alias saycolors='./saycolors.sh "green"' - green is standard

    Review
    Take a minute to review what you’ve learned about bash scripting.

    Any command that can be run in the terminal can be run in a bash script.
    Variables are assigned using an equals sign with no space (greeting="hello").
    Variables are accessed using a dollar sign (echo $greeting).
    Conditionals use if, then, else, fi syntax.
    Three types of loops can be used: for, while, and until.
    Bash scripts use a unique set of comparison operators:
    Equal: -eq
    Not equal: -ne
    Less than or equal: -le
    Less than: -lt
    Greater than or equal: -ge
    Greater than: -gt
    Is null: -z
    Input arguments can be passed to a bash script after the script name, separated by spaces (myScript.sh “hello” “how are you”).
    Input can be requested from the script user with the read keyword.
    Aliases can be created in the .bashrc or .bash_profile using the alias keyword.
 


