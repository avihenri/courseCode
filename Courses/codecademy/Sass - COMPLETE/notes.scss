/*

LESSON ONE - MY FIRST SASS STYLESHEET
WHY SASS??

Sass = Syntactically Awesome StyleSheets
- extension to css
- can write clean, sustainable CSS code & solve common repitition & maintenance issues


COMPILING SASS
- Browsers cannot directly interpret Sass = compile to css so browsers can understand it
- Compiling = converting code to lower level
- to compile - in a terminal = sass main.scss main.css
    - The Sass command - takes two arguments
        - input - main.scss
        - location where to put input main.css
    - once run, Sass code will automatically be compiled when run is clicked 

SASS: OVERVIEW
- Sass - enables us to write short and to point, readable code
- with Variables, Mixins, Nests

NESTING SELECTORS
- Nesting = process of placing selectors inside the scope of another selector
- Sass selector scope - anything between the curly braces {  } 
- Nested selectors are the children and former selectors are the parents
EXAMPLE - 
*/
.parent { // parent
    color: blue;
    .child { // child
        font-size: 12px;
    }
}
/*
- This would be the same as -
.parent {
  color: blue;
}

.parent .child {
    font-size: 12px;
}

NESTED PROPERTIES
- You can nest properties by appending : colon after the name of the property
*/
.parent {
    font : {
      family: Roboto, sans-serif;
      size: 12px;
      decoration: none;
    }
  }
/*
Would compile to -
.parent {
  font-family: Roboto, sans-serif;
  font-size: 12px;
  font-decoration: none;
}

VARIABLES IN SASS
- Set variables with a value and use it throughout your file then if you need to change it, you can change it once for all
     - $translucent-white: rgba(255,255,255,0.3);
     - add variables to the top of the page
     - variables should have the same naming convention 

SASSY TYPES
- There are different data types you can assign to variables in CSS
    - color
    - numbers - 8.11 or 12 or 10px (px can be added and the number will be seen)
    - Strings - "potato"
    - Booleans - true or false
    - null - empty

    type number - $icon-square-length: 300px;
        then in selector add - 
        width: $icon-square-length;
        height: $icon-square-length;

MAPS & LISTS
- Two other data types - Maps & Lists
- Lists - can be separated by either spaces or commas - 1.5em Helvetica bold; OR Helvetica, Arial, sans-serif;
    - you can also add parentheses to create lists made up of lists
- Maps - Similar to lists but is key-value pair - (key1: value1, key2: value2);
    - the value of a key can also be a list or a map



LESSON TWO - MIXINS & SELECTORS

THE & SELECTOR IN NESTING
- Pseudo-element is used to style parts of an element
    - ::before or ::after - style before and after an element
    - :hover - set properties on element if mouseover
- & character is used to specify exactly where a parent selector should be inserted
*/
.notecard { 
    &:hover{
    @include transform (rotatey(-180deg));  
    }
}
/*
- this is the same as this in css
.notecard:hover {
  transform: rotatey(-180deg);
}


WHAT IS A MIXIN?
- lets you create groups of css
- this is how to create a mixin -
*/
@mixin backface-visibility {
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    -moz-backface-visibility: hidden;
    -ms-backface-visibility: hidden;
    -o-backface-visibility: hidden;
}
/*
- mixin names & all other Sadd identifiers use hyphens & underscores
- to include the mixin -
*/
.notecard {
    .front, .back {
        width: 100%;
        height: 100%;
        position: absolute;
        @include backface-visibility;
    }
}  
/*
- The equivalent in CSS 
.notecard .front, .notecard .back {
  width: 100%;
  height: 100%;
  position: absolute;

   backface-visibility: hidden;
  -webkit-backface-visibility: hidden; 
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

MIXINS: ARGUMENTS
- Mixins can also take a value
- you should only really use a mixin if it takes a value
*/
@mixin backface-visibility($visibility) {
    backface-visibility: $visibility;
    -webkit-backface-visibility: $visibility;
    -moz-backface-visibility: $visibility;
    -ms-backface-visibility: $visibility;
    -o-backface-visibility: $visibility;
}
@include backface-visibility(hidden); // you could put hidden or visible
/*

DEFAULT VALUE ARGUMENTS
- Mixin arguments can be assigned a default value in the mixin definition by using a special notation
- Defining a default value for each argument is optional
*/  
@mixin backface-visibility($visibility: hidden) {
    backface-visibility: $visibility;
   -webkit-backface-visibility: $visibility;
   -moz-backface-visibility: $visibility;
   -ms-backface-visibility: $visibility;
   -o-backface-visibility: $visibility;
 }
 @include backface-visibility(); // removed value

 /*
MIXIN FACTS
- Can take multiple arguments
- Can explicitly define arguments in @include statement
- If values are explicitly specified you can send them out of order
- if mixin def has a combo of arguments with/without default - ones with default value should go first
- Mixins can be nested
EXAMPLES
 */
 @mixin dashed-border($width, $color: #FFF) { // MULTIPLE ARGUMENTS
    border: {
       color: $color;
       width: $width;
       style: dashed;
    }
  }
  
  span { //only passes non-default argument
      @include dashed-border(3px);
  }
  
  p { //passes both arguments
      @include dashed-border(3px, green);
  }
  
  div { //passes out of order but explicitly defined
     @include dashed-border(color: purple, width: 5px); 
  }

/*
LIST ARGUMENTS
- You can pass in multiple arguments in a list or map format
For example, take the multiple properties needed to create the college-ruled stripes in the back of our notecard.
*/
@mixin stripes($direction, $width-percent, $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}
/*
We can create a map of the above properties - so we can update/reference them
*/
$college-ruled-style: ( 
    direction: to bottom,
    width-percent: 15%,
    stripe-color: blue,
    stripe-background: white
);
// When we include the mixin, we can pass the map with ... notation
.definition {
    width: 100%;
    height: 100%;
    @include stripes($college-ruled-style...);
}
// NOTE: prioritize readability over writing less code

/*
STRING INTERPOLATION
- when you put a variable string into another string - in SASS we use #{$variable}
*/
@mixin photo-content($file) {
    content: url(#{$file}.jpg); //string interpolation
    object-fit: cover;
}

.photo { 
    @include photo-content('titanosaur');
    width: 60%;
    margin: 0px auto; 
}

/*
THE & SELECTOR IN MIXINS
- Sass allows & usage inside of mixins
    - & gets assigned the value of the parent at the point where the mixin is included
    - if no parent, the value is null & Sas will throw an error
*/
@mixin text-hover($color){
    &:hover {
        color: $color; 
    }
  }
  .word { //SCSS: 
    display: block; 
    text-align: center;
    position: relative;
    top: 40%;
    @include text-hover(red);
  }
//The above will compile to the following CSS:
  .word{ 
    display: block;
    text-align: center;
    position: relative;
    top: 40%;
  }
  .word:hover{
    color: red;
  }

/*

Generalizations
This lesson has introduced you to some of the most powerful concepts Sass has to offer!

Mixins are a powerful tool that allow you to keep your code DRY. Their ability to take in arguments, 
assign default values to those arguments, and accept said arguments in whatever format is most readable 
and convenient for you makes the mixin Sass’s most popular directive.

The & selector* is a Sass construct that allows for expressive flexibility by referencing the parent 
selector when working with CSS psuedo elements and classes.

String interpolation is the glue that allows you to insert a string in the middle of another when it is 
in a variable format. Its applications vary, but the ability to interpolate is especially useful for passing in file names.

Let’s keep up the awesome job in the next lesson, where we will learn about functions, arithmetic, and color operations in Sass!


QUIZ - 
Which of the following situations needs string interpolation in order for the code to compile?
Incorrect:
background-image: url($string).jpg;
Correct:
    Both “background-image: url($string).jpg;” and “.$string{ width: 100px; height: 100px;}”
Incorrect:
content: $string;
Incorrect:
.$string{ width: 100px; height: 100px;}

Which of the following is not allowed inside a mixin?
Correct:
All are allowed
Incorrect:
Defining a child class inside the mixin
Incorrect:
Including another mixin
Incorrect:
The use of the “&” parent selector


What is the value of “&” in the code below?

.container{
  .icon{
    font-size: 12px;
    
    &:before{
      position: absolute;
      content: """; 
    }
  }
}
Incorrect:
.container::before
Incorrect:
.icon::before
Correct:
.container .icon
Incorrect:
::before
*/
/*
FUNCTIONS IN SCSS
- functions in Sass allow computing & iterating on styles
    - Operate on color values
    - Iterate on lists & maps
    - Apply Styles based on conditions
    - Assign values that result from math operations

ARITHMETIC & COLOR
- Sass comes with funcs that make colors easier
- alpha parameter in color (RGBA OR HSLA) is a mask denoting opacity
    - how one color should be merged with another when two are on top of each other
    - fade-out - makes color more transparent - number between 0 and 1
        decreasing opacity or alpha channel byt the amount
*/
$color: rgba(39, 39, 39, 0.5);
$amount: 0.1;
$color2: fade-out($color, $amount); //rgba(39, 39, 39, 0.4) 
/*
    - Fade-in - changes color by increasing opacity
*/
$color: rgba(55,7,56, 0.5);
$amount: 0.1;
$color2: fade-in($color, $amount); //rgba(55,7,56, 0.6)
/*
    - adjust-hue function adjust-hue($color, $degrees) 
        - changes the hue of a color by taking color & degrees (-360 > 360) & rotate the color wheel by the amount

COLOR FUNCTIONS
- Sass allows math functions to compute measurements
    - Performed on red, green, blue components
    - Computes answer by operating on every two digits
        - $color: #010203 + #040506; - would operate on:
            01 + 04 = 05
            02 + 05 = 07
            03 + 06 = 09
            = color: #050709;
        - color: red + blue; = purple

ARITHMETIC
- Sass arithmetic operations:
    - add +, subtract -, multiply *, divide /, modulo % (remainder in given division - 9 % 2 = 1 as there are 8 2s and 1 left over)
    - units need to be compatible - so you can't multiply pixels by ems
    - As in normal Maths - multiplying 2 units results in squared units: 10px * 10px = 100px * px - this would throw an error in CSS so 
        you do the following - 10px * 10 = 100px
    height: $width/6; - 1/6th
    line-height: $width/6; - 1/6th
    border-radius: $width/30; - is 1/30th 

DIVISION CAN BE SPECIAL
- The / character is both divide & a separator
- Some Instances of / as division:
    - if a value is stored in a variable or returned by a function - width: $variable/6; //division
    - if the value is surrounded by () unless those () are outside a list & the value is inside - line-height: (600px)/9; //division
    - if value is used as part of another arithmetic expression - margin-left: 20-10 px/ 2; //division  
    - font-size: 10px/8px; //not division

    font-size: $width/6/2; - first / is after variable so division, second / after operation so division

EACH LOOPS
- More complex functions
    - Each Loop - iterate on each of the values on a list
*/
@each $item in $list {
    //some rules and or conditions
  }
/*
  - $item is dynamically assigned to the value of the object in the list, according to the position & iteration in the loop
*/
$list: (orange, purple, teal);
@each $item in $list {
    .#{$item} { // . for the class #{} for the variable that the loop is iterating from the list
      background: $item;
    }
  }

/*
FOR LOOPS
- Used to style numerous elements or assign properties all at once
*/
@for $i from $begin through $end {
    //some rules and or conditions
 }
/*
    - $i - index in the list
    - $begin & $end - placeholders for the start & end points in the loop
    - Keywords through or to are interchangeable in Sass
*/
$total: 10; //Number of .ray divs in our html
$step: 360deg / $total; //Used to compute the hue based on color-wheel
.ray {
  height: 30px;
}
@for $i from 1 through $total {
  .ray:nth-child(#{$i}) {
    background: adjust-hue(blue, $i * $step); // makes a rainbow on the page with each child 30px high
   }
}
/*
CONDITIONS
-   In Sass - if() can be used inline to assign a value of a property
    - width: if( $condition, $value-if-true, $value-if-false);
    - for more than two outcomes - @if, @else-if & @else can be used
*/
@mixin deck($suit) { // how to handle color of a deck of cards
    @if($suit == hearts || $suit == spades){
      color: blue;
    }
    @else-if($suit == clovers || $suit == diamonds){
      color: red;
    }
    @else{
      //some rule
    }
}
/*
The following changes the above rainbow to the width of a .ray, based on if te element falls on an even or off number
- to get even odd - we used the modulo % 
*/
$total: 10; //Number of .ray divs in our html
$step: 360deg / $total; //Used to compute the hue based on color-wheel
.ray {
  height: 30px;
}
//Add your for-loop here:
@for $i from 1 through $total {
  .ray:nth-child(#{$i}) {
    width: if($i % 2 == 0, 300px, 350px);
    margin-left: if($i % 2 == 0, 0px, 50px);
    background: adjust-hue(blue, $i * $step);
   }
}
/*
Generalizations
Functions in Sass allow for an easier way to style pages, work with colors, and iterate on DOM elements.

Having both for loops and each loops gives the programmer different formats to iterate on both lists and maps.

The introduction of conditional statements allows you to create logic-based styling rules using SCSS.

There are other native Sass functions available to use, and you can even make your own custom functions if 
you have a good foundation in Ruby, check out more information - https://sass-lang.com/documentation/modules
*/

/* PROJECT 3 NOTES
Index function
- $i: index($list, $element);
*/
@each $food, $tons-produced in $topfoods {
  // index function
$i: index($top-foods,($food $tons-produced)); 
    // $topfoods has a list of goods with name and tons - ("Sugar Beets" 247);
}

/* Quiz 3 
What is the benefit of using a color function to change opacity of a color?
Correct:
You can isolate the transparency of a single component of the element.
Incorrect:
You change the transperency of the entire element.
Incorrect:
The alpha channel cannot be affected.
Incorrect:
No benefit, you should just use RGB and hsl colors.
👏
By using a color type with an alpha channel, you can set the color transparency of a single component of a selector, 
for example the background color can be different but the color of the text will be full opacity.

Which of the following is a characteristic of color computation in SCSS?
Incorrect:
You can add and subtract colors, but you cannot multiply or divide them.
Correct:
You can conduct arithmetic on all colors, but it will be computed piece-wise by every 2 digits.
Incorrect:
You can conduct arithmetic on all colors, and the numbers will be computed a digit at a time.
Incorrect:
There is no such thing as color arithmetic.
👏
Indeed, arithmetic in color values is computed piece-wise by every 2 digits.

In which of the following scenarios is “/“ not acting as division, but as a separator?
Incorrect:
padding: 50-10 px/ 2;
Incorrect:
width: $variable/2;
Correct:
font-size: 12px/14px;
Incorrect:
height: (800px)/3;
👏
No operation or variable is preceding the / symbol, therefore it is interpreted as a regular separator.

Which of the following is incorrect loop syntax?
Incorrect:
@each $item in $map
Incorrect:
@for $item from $begin through $end
Incorrect:
@for $item from $begin to $end
Correct:
All are valid
👏
Both “through” and “to” are valid in a for-loop.

/ *

SASS STRUCTURE
Good to be organised and have things in separate areas -

Top level folder Sass
- Components/ 
	- _buttons.scss
	- _carousel.scss
	- _cover.scss 
	- etc..
- Helpers/
	- _variables.scss
	- _functions.scss
	- _mixins.scss
	- etc..
- Layout/ 
	- _grid.scss
	- _header.scss
	- _footer.scss
	- etc..
- Pages/ 
	- _home.scss
	- _contact.scss
	- etc

@IMPORT IN SCSS
Sass extends the exiting CSS @import rule to allow including other SCSS & Sass files
- all imported SCSS files are imported in a main.scss file to make one file
- main SCSS has access to all variables & mixins imported with @import command that takes a filename to import
@import looks at a Sass file in same/specified directory but few situations it behaves with the css import rules -
- extensions ends in css
- filename begins with http://
- filename is a url()
- @import has media queries

ORGANISE WITH PARTIALS
- Partials = are files you split up to organise functionality
- prefixed with _
	- tells Sass to hold from compling file & import it
-To import a partial into a main file, omit the underscore
- @import "variables"; instead of _variables
 

@EXTEND
- when we want to have styles that are in one class to be in another we usually add both classes to an element in the HTML
<span class="lemonade"></span>
<span class="lemonade strawberry"></span>
- can be a bug in maintainability - both classes need to be in the HTML
- Sass uses @extend
  - we can make strawberry extend lemonade
  */
.lemonade {
  border: 1px yellow;
  background-color: #fdd;
}
.strawberry {
  @extend .lemonade;
  border-color: pink;
}
/*
%PLACEHOLDERS
- behaves just like a class or id selector but uses % notation
- prevents rules from being rendered to css
- become active once they are extended anywhere an id or class can be extended
*/
a%drink {
    font-size: 2em;
    background-color: $lemon-yellow;
 }
 .lemonade {
  @extend %drink;
  //more rules
 }
// translates to:
  a.lemonade {
    font-size: 2em;
    background-color: $lemon-yellow;
 }
.lemonade {
  //more rules
}
/*
@EXTEND VS @MIXIN
- As a rule 
	- only create mixins that take arguments, otherwise extend a placeholder
	-Look at your CSS output to make sure your extend is behaving as you intend

Generalizations
Sustainability is key in Sass, planning out the structure of your files and sticking to naming conventions for both variables, mixins, and selectors can reduce complexity.

Understanding CSS output is also essential to writing sustainable SCSS. In order to make the best choices about what functions and directives to use, it is important to first understand how this will translate in CSS.

Mixins should only be used if they take in an argument, otherwise, you should extend the selector’s rules, whether it be a class, id, or placeholder.
https://sass-lang.com/documentation

QUIZ
In the following examples, when is @import behaving as a SCSS import, not a CSS import?
Incorrect:
When the filename is a url()
Incorrect:
If the file has any media queries
Correct:
When the file’s extension is .scss
Incorrect:
If the file name begins with http://
👏
The import statement solely behaves as a SCSS import if the file’s extension is .scss

When should you extend a class as opposed to including a mixin?

Incorrect:
When the mixin takes parameters

Incorrect:
When you need to use the & parent selector

Correct:
When the mixin takes no parameters

Incorrect:
When you already wrote the code necessary in the rules of a different class

👏
Mixins that take no parameters are acting like copy and paste, making for verbose stylesheets. It is best to extend in this situation.


Where in the codebase should you include your import statement?

Incorrect:
At the top of your main output CSS file

Incorrect:
Inside the <head> section of index.html

Correct:
At the top of your global or main SCSS file, or inside the file that will make use of its contents.

Incorrect:
In the <script> section in the body of index.html

👏
Partials should only be imported at the top of the file where they are needed.


What is a good characteristic of a sustainable SCSS code base?

Incorrect:
Having multiple naming conventions for variables

Incorrect:
Using mixins, and avoiding extending in order to reduce complexity

Incorrect:
Keeping all the logic inside one file for easy access

Correct:
Good isolation of code logic inside of partials in appropriately named sub-folders

👏
Keeping all the logic inside one file can make for cluttered spreadsheets, partials were invented to solve this problem.



What document has access to the mixins, variables, placeholders from an imported file?

Incorrect:
None of these

Incorrect:
Access is only limited to functions inside the file that imports them

Correct:
The file that imports them has full access to the variables as though they were defined in that very file.

Incorrect:
There is no access in the file that includes the import, variables are only available within the partial.

👏
The components defined in an imported file are accessible anywhere inside the file that imports them.



When should you make a placeholder class?

Incorrect:
When you want to reduce use of mixins

Incorrect:
When you need to use the class name in your HTML

Incorrect:
When you have another class of the same name

Correct:
When your HTML code actually never uses the class you are extending, only your SCSS code uses it to extend other classes

👏
There is no reason to compile a class to your CSS output if it only ever gets extended, it will clutter your stylesheet. Using a placeholder is the best way to avoid this situation.

*/

